# -*- coding: utf-8 -*-
"""Log File Analyzer:.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q1WpMGHKMQw6FyOhfJcWIMWD9qEZtR0B
"""

import re
from collections import Counter

def parse_log(file_path):
    # Regular expression to match the Common Log Format
    log_pattern = re.compile(
        r'(?P<ip>\S+) - - \[(?P<date>[^\]]+)\] "(?P<request>[^"]+)" (?P<status>\d{3}) (?P<size>\S+)'
    )

    # Initialize counters and data holders
    ip_counter = Counter()
    page_counter = Counter()
    error_404_counter = 0

    with open(file_path, 'r') as log_file:
        for line in log_file:
            match = log_pattern.match(line)
            if match:
                ip = match.group('ip')
                request = match.group('request')
                status = match.group('status')

                # Increment IP request count
                ip_counter[ip] += 1

                # Increment page request count
                method, page, _ = request.split()
                page_counter[page] += 1

                # Count 404 errors
                if status == '404':
                    error_404_counter += 1

    return ip_counter, page_counter, error_404_counter


def generate_report(ip_counter, page_counter, error_404_counter):
    print("\nWeb Server Log Analysis Report:")
    print("-" * 40)
    print(f"Total 404 Errors: {error_404_counter}")
    print("\nTop 10 Most Requested Pages:")
    for page, count in page_counter.most_common(10):
        print(f"{page}: {count} requests")
    print("\nTop 10 IPs by Request Count:")
    for ip, count in ip_counter.most_common(10):
        print(f"{ip}: {count} requests")


if __name__ == "__main__":
    log_file_path = input("Enter the path to the web server log file: ").strip()

    try:
        ip_counts, page_counts, total_404_errors = parse_log(log_file_path)
        generate_report(ip_counts, page_counts, total_404_errors)
    except FileNotFoundError:
        print(f"Error: File not found at '{log_file_path}'.")
    except Exception as e:
        print(f"An error occurred: {e}")