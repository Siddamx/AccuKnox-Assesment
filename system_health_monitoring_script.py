# -*- coding: utf-8 -*-
"""System Health Monitoring Script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oXee37JGWH9DDjgz1IIZJSTvdt7yVfCh
"""

import psutil
import time
import logging
from datetime import datetime

# Define thresholds
CPU_THRESHOLD = 80
MEM_THRESHOLD = 80
DISK_THRESHOLD = 90

# Define log file
LOG_FILE = "/var/log/system_health.log"

# Set up logging configuration
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(message)s')

# Function to check CPU usage
def check_cpu_usage():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        alert_message = f"CPU usage is above threshold: {cpu_usage}%"
        print(alert_message)
        logging.info(alert_message)

# Function to check memory usage
def check_memory_usage():
    memory = psutil.virtual_memory()
    mem_usage = memory.percent
    if mem_usage > MEM_THRESHOLD:
        alert_message = f"Memory usage is above threshold: {mem_usage}%"
        print(alert_message)
        logging.info(alert_message)

# Function to check disk usage
def check_disk_usage():
    disk = psutil.disk_usage('/')
    disk_usage = disk.percent
    if disk_usage > DISK_THRESHOLD:
        alert_message = f"Disk usage is above threshold: {disk_usage}%"
        print(alert_message)
        logging.info(alert_message)

# Function to check running processes
def check_running_processes():
    process_count = len(psutil.pids())
    alert_message = f"Currently running processes: {process_count}"
    print(alert_message)
    logging.info(alert_message)

# Main monitoring function
def monitor_system_health():
    check_cpu_usage()
    check_memory_usage()
    check_disk_usage()
    check_running_processes()

# Run the monitoring function at regular intervals (e.g., every 60 seconds)
if __name__ == "__main__":
    while True:
        monitor_system_health()
        time.sleep(60)  # Monitor every 60 seconds